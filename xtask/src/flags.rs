use std::path::PathBuf;

xflags::xflags! {
    src "src/flags.rs"

    cmd localnet {

        cmd run {
            optional -p, --path path: PathBuf
            optional -c, --chain-spec chain_spec: PathBuf
            optional --node-name node_name: String
            optional --node-key node_key: String
            optional --node-validator node_validator: bool
            optional --account-suri account_suri: String
            optional --tcp-port tcp_port: u16
            optional --rpc-port rpc_port: u16
            repeated --bootnodes bootnodes: String

            optional --alice
            optional --bob
        }
    }
}

// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Localnet {
    pub subcommand: LocalnetCmd,
}

#[derive(Debug)]
pub enum LocalnetCmd {
    Run(Run),
}

#[derive(Debug)]
pub struct Run {
    pub path: Option<PathBuf>,
    pub chain_spec: Option<PathBuf>,
    pub node_name: Option<String>,
    pub node_key: Option<String>,
    pub node_validator: Option<bool>,
    pub account_suri: Option<String>,
    pub tcp_port: Option<u16>,
    pub rpc_port: Option<u16>,
    pub bootnodes: Vec<String>,
    pub alice: bool,
    pub bob: bool,
}

impl Localnet {
    #[allow(dead_code)]
    pub fn from_env_or_exit() -> Self {
        Self::from_env_or_exit_()
    }

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end
