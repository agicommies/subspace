use std::path::PathBuf;

xflags::xflags! {
	src "src/flags.rs"

	cmd localnet {

		cmd run {
			optional --path path: PathBuf
			optional --chain-name chain_name: String
			optional --chain-path chain: PathBuf
			optional --secrets-path secrets_path: PathBuf
			optional --base-path base_path: PathBuf
			optional --port tcp_port: u16
			optional --rpc-port rpc_port: u16
			repeated --bootnodes bootnodes: String
			optional --validator
			optional --purge
		}
	}
}

// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Localnet {
    pub subcommand: LocalnetCmd,
}

#[derive(Debug)]
pub enum LocalnetCmd {
    Run(Run),
}

#[derive(Debug)]
pub struct Run {
    pub path: Option<PathBuf>,
    pub chain_name: Option<String>,
    pub chain_path: Option<PathBuf>,
    pub secrets_path: Option<PathBuf>,
    pub base_path: Option<PathBuf>,
    pub port: Option<u16>,
    pub rpc_port: Option<u16>,
    pub bootnodes: Vec<String>,
    pub validator: bool,
    pub purge: bool,
}

impl Localnet {
    #[allow(dead_code)]
    pub fn from_env_or_exit() -> Self {
        Self::from_env_or_exit_()
    }

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end
