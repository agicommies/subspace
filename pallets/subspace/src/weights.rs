
//! Autogenerated weights for `pallet_subspace`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-23, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Ubuntu-2204-jammy-amd64-base`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("specs/benchmarks.json")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-subspace
// benchmark
// pallet
// --chain
// specs/benchmarks.json
// --pallet
// pallet_subspace
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/subspace/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_subspace`.
pub trait WeightInfo {
	fn set_weights() -> Weight;
	fn add_stake() -> Weight;
	fn remove_stake() -> Weight;
	fn add_stake_multiple() -> Weight;
	fn remove_stake_multiple() -> Weight;
	fn transfer_stake() -> Weight;
	fn transfer_multiple() -> Weight;
	fn register() -> Weight;
	fn deregister() -> Weight;
	fn update_module() -> Weight;
	fn update_subnet() -> Weight;
	fn delegate_rootnet_control() -> Weight;
	fn register_subnet() -> Weight;
	fn add_blacklist() -> Weight;
	fn remove_blacklist() -> Weight;
}

/// Weights for `pallet_subspace` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:2 w:0)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinValidatorStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetEmissionModule::SubnetConsensusType` (r:1 w:0)
	/// Proof: `SubnetEmissionModule::SubnetConsensusType` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:1 w:0)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (r:1 w:0)
	/// Proof: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::WeightSetAt` (r:0 w:1)
	/// Proof: `SubspaceModule::WeightSetAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Weights` (r:0 w:1)
	/// Proof: `SubspaceModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2136`
		//  Estimated: `8076`
		// Minimum execution time: 65_763_000 picoseconds.
		Weight::from_parts(67_386_000, 8076)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::MinimumAllowedStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinimumAllowedStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:5 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:5 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:2 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:3 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1648`
		//  Estimated: `15013`
		// Minimum execution time: 74_459_000 picoseconds.
		Weight::from_parts(76_623_000, 15013)
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `SubspaceModule::StakeTo` (r:2 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinimumAllowedStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinimumAllowedStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:5 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:5 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::StakeFrom` (r:3 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1732`
		//  Estimated: `15097`
		// Minimum execution time: 80_150_000 picoseconds.
		Weight::from_parts(82_384_000, 15097)
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `SubspaceModule::MinimumAllowedStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinimumAllowedStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::N` (r:5 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:3 w:2)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:6 w:2)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_stake_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1864`
		//  Estimated: `27604`
		// Minimum execution time: 144_931_000 picoseconds.
		Weight::from_parts(146_203_000, 27604)
			.saturating_add(T::DbWeight::get().reads(27_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `SubspaceModule::MinimumAllowedStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinimumAllowedStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:3 w:2)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:5 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::StakeFrom` (r:6 w:2)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_stake_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2002`
		//  Estimated: `27742`
		// Minimum execution time: 170_419_000 picoseconds.
		Weight::from_parts(172_793_000, 27742)
			.saturating_add(T::DbWeight::get().reads(27_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `SubspaceModule::N` (r:5 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinimumAllowedStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinimumAllowedStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:3 w:2)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::StakeFrom` (r:6 w:2)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn transfer_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1948`
		//  Estimated: `27688`
		// Minimum execution time: 167_924_000 picoseconds.
		Weight::from_parts(170_388_000, 27688)
			.saturating_add(T::DbWeight::get().reads(27_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `System::Account` (r:3 w:3)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn transfer_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `77`
		//  Estimated: `8727`
		// Minimum execution time: 61_715_000 picoseconds.
		Weight::from_parts(62_507_000, 8727)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `SubspaceModule::RegistrationsPerBlock` (r:1 w:1)
	/// Proof: `SubspaceModule::RegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:2 w:0)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ModuleBurnConfig` (r:1 w:0)
	/// Proof: `SubspaceModule::ModuleBurnConfig` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubspaceModule::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:3 w:1)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:2 w:1)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetEmissionModule::SubnetConsensusType` (r:6 w:0)
	/// Proof: `SubnetEmissionModule::SubnetConsensusType` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:6 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MinNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Name` (r:2 w:1)
	/// Proof: `SubspaceModule::Name` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FloorDelegationFee` (r:1 w:0)
	/// Proof: `SubspaceModule::FloorDelegationFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::DelegationFee` (r:1 w:1)
	/// Proof: `SubspaceModule::DelegationFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Active` (r:1 w:1)
	/// Proof: `SubspaceModule::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Consensus` (r:1 w:1)
	/// Proof: `SubspaceModule::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Emission` (r:1 w:1)
	/// Proof: `SubspaceModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Incentive` (r:1 w:1)
	/// Proof: `SubspaceModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Dividends` (r:1 w:1)
	/// Proof: `SubspaceModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::PruningScores` (r:1 w:1)
	/// Proof: `SubspaceModule::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Rank` (r:1 w:1)
	/// Proof: `SubspaceModule::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Trust` (r:1 w:1)
	/// Proof: `SubspaceModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ValidatorPermits` (r:1 w:1)
	/// Proof: `SubspaceModule::ValidatorPermits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ValidatorTrust` (r:1 w:1)
	/// Proof: `SubspaceModule::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationBlock` (r:0 w:1)
	/// Proof: `SubspaceModule::RegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:0 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Metadata` (r:0 w:1)
	/// Proof: `SubspaceModule::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2808`
		//  Estimated: `18648`
		// Minimum execution time: 150_341_000 picoseconds.
		Weight::from_parts(152_215_000, 18648)
			.saturating_add(T::DbWeight::get().reads(45_u64))
			.saturating_add(T::DbWeight::get().writes(24_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:7 w:1)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:3 w:1)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Active` (r:1 w:1)
	/// Proof: `SubspaceModule::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Consensus` (r:1 w:1)
	/// Proof: `SubspaceModule::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Dividends` (r:1 w:1)
	/// Proof: `SubspaceModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Emission` (r:1 w:1)
	/// Proof: `SubspaceModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Incentive` (r:1 w:1)
	/// Proof: `SubspaceModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::PruningScores` (r:1 w:1)
	/// Proof: `SubspaceModule::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Rank` (r:1 w:1)
	/// Proof: `SubspaceModule::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Trust` (r:1 w:1)
	/// Proof: `SubspaceModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ValidatorPermits` (r:1 w:1)
	/// Proof: `SubspaceModule::ValidatorPermits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ValidatorTrust` (r:1 w:1)
	/// Proof: `SubspaceModule::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::WeightSetAt` (r:1 w:1)
	/// Proof: `SubspaceModule::WeightSetAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Weights` (r:1 w:1)
	/// Proof: `SubspaceModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationBlock` (r:1 w:1)
	/// Proof: `SubspaceModule::RegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:1 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Metadata` (r:1 w:1)
	/// Proof: `SubspaceModule::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Name` (r:1 w:1)
	/// Proof: `SubspaceModule::Name` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:2 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubnetEmissionModule::SubnetConsensusType` (r:1 w:1)
	/// Proof: `SubnetEmissionModule::SubnetConsensusType` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetGaps` (r:1 w:1)
	/// Proof: `SubspaceModule::SubnetGaps` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetEmissionModule::SubnetEmission` (r:0 w:1)
	/// Proof: `SubnetEmissionModule::SubnetEmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::SubnetGovernanceConfig` (r:0 w:1)
	/// Proof: `GovernanceModule::SubnetGovernanceConfig` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::DelegationFee` (r:0 w:1)
	/// Proof: `SubspaceModule::DelegationFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ModuleBurnConfig` (r:0 w:1)
	/// Proof: `SubspaceModule::ModuleBurnConfig` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetRegistrationBlock` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetRegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:0 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetMetadata` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:0 w:1)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:0 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinValidatorStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BondsMovingAverage` (r:0 w:1)
	/// Proof: `SubspaceModule::BondsMovingAverage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (r:0 w:1)
	/// Proof: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3266`
		//  Estimated: `21581`
		// Minimum execution time: 251_861_000 picoseconds.
		Weight::from_parts(254_466_000, 21581)
			.saturating_add(T::DbWeight::get().reads(35_u64))
			.saturating_add(T::DbWeight::get().writes(46_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Name` (r:2 w:1)
	/// Proof: `SubspaceModule::Name` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:1 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Metadata` (r:1 w:1)
	/// Proof: `SubspaceModule::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::DelegationFee` (r:1 w:0)
	/// Proof: `SubspaceModule::DelegationFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MinNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FloorDelegationFee` (r:1 w:0)
	/// Proof: `SubspaceModule::FloorDelegationFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1728`
		//  Estimated: `7668`
		// Minimum execution time: 46_968_000 picoseconds.
		Weight::from_parts(47_780_000, 7668)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `GovernanceModule::SubnetGovernanceConfig` (r:1 w:1)
	/// Proof: `GovernanceModule::SubnetGovernanceConfig` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MinNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::Curator` (r:1 w:0)
	/// Proof: `GovernanceModule::Curator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::FloorFounderShare` (r:1 w:0)
	/// Proof: `SubspaceModule::FloorFounderShare` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FloorDelegationFee` (r:1 w:0)
	/// Proof: `SubspaceModule::FloorDelegationFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetImmunityPeriod` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetImmunityPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::GeneralSubnetApplicationCost` (r:1 w:0)
	/// Proof: `GovernanceModule::GeneralSubnetApplicationCost` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Kappa` (r:1 w:0)
	/// Proof: `SubspaceModule::Kappa` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Rho` (r:1 w:0)
	/// Proof: `SubspaceModule::Rho` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(30), added: 525, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::N` (r:1 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:6 w:1)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:1 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ModuleBurnConfig` (r:0 w:1)
	/// Proof: `SubspaceModule::ModuleBurnConfig` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedValidators` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:0 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetMetadata` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:0 w:1)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinValidatorStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BondsMovingAverage` (r:0 w:1)
	/// Proof: `SubspaceModule::BondsMovingAverage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (r:0 w:1)
	/// Proof: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_subnet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1800`
		//  Estimated: `17640`
		// Minimum execution time: 77_946_000 picoseconds.
		Weight::from_parts(79_148_000, 17640)
			.saturating_add(T::DbWeight::get().reads(24_u64))
			.saturating_add(T::DbWeight::get().writes(18_u64))
	}
	/// Storage: `SubnetEmissionModule::SubnetConsensusType` (r:6 w:0)
	/// Proof: `SubnetEmissionModule::SubnetConsensusType` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:2 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RootnetControlDelegation` (r:1 w:1)
	/// Proof: `SubspaceModule::RootnetControlDelegation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RootNetWeightCalls` (r:1 w:1)
	/// Proof: `SubspaceModule::RootNetWeightCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delegate_rootnet_control() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1134`
		//  Estimated: `16974`
		// Minimum execution time: 29_114_000 picoseconds.
		Weight::from_parts(29_816_000, 16974)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SubspaceModule::SubnetNames` (r:5 w:1)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FloorFounderShare` (r:1 w:0)
	/// Proof: `SubspaceModule::FloorFounderShare` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MinNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::Curator` (r:1 w:0)
	/// Proof: `GovernanceModule::Curator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::FloorDelegationFee` (r:1 w:0)
	/// Proof: `SubspaceModule::FloorDelegationFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetImmunityPeriod` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetImmunityPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::GeneralSubnetApplicationCost` (r:1 w:0)
	/// Proof: `GovernanceModule::GeneralSubnetApplicationCost` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Kappa` (r:1 w:0)
	/// Proof: `SubspaceModule::Kappa` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Rho` (r:1 w:0)
	/// Proof: `SubspaceModule::Rho` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(30), added: 525, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::SubnetBurn` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetBurn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::N` (r:6 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetGaps` (r:1 w:1)
	/// Proof: `SubspaceModule::SubnetGaps` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubspaceModule::SubnetRegistrationsThisInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetEmissionModule::SubnetEmission` (r:0 w:1)
	/// Proof: `SubnetEmissionModule::SubnetEmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetEmissionModule::SubnetConsensusType` (r:0 w:1)
	/// Proof: `SubnetEmissionModule::SubnetConsensusType` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::SubnetGovernanceConfig` (r:0 w:1)
	/// Proof: `GovernanceModule::SubnetGovernanceConfig` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Burn` (r:0 w:1)
	/// Proof: `SubspaceModule::Burn` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ModuleBurnConfig` (r:0 w:1)
	/// Proof: `SubspaceModule::ModuleBurnConfig` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetRegistrationBlock` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetRegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedValidators` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:0 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetMetadata` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:0 w:1)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:0 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinValidatorStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BondsMovingAverage` (r:0 w:1)
	/// Proof: `SubspaceModule::BondsMovingAverage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (r:0 w:1)
	/// Proof: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_subnet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1351`
		//  Estimated: `17191`
		// Minimum execution time: 109_685_000 picoseconds.
		Weight::from_parts(111_358_000, 17191)
			.saturating_add(T::DbWeight::get().reads(30_u64))
			.saturating_add(T::DbWeight::get().writes(26_u64))
	}
	/// Storage: `SubspaceModule::Founder` (r:1 w:0)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:1 w:0)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:1 w:0)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:1 w:0)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:1 w:0)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:1 w:0)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (r:1 w:0)
	/// Proof: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BondsMovingAverage` (r:1 w:0)
	/// Proof: `SubspaceModule::BondsMovingAverage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ModuleBurnConfig` (r:1 w:0)
	/// Proof: `SubspaceModule::ModuleBurnConfig` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinValidatorStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedValidators` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::SubnetGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::SubnetGovernanceConfig` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::SubnetMetadata` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ValidatorBlacklist` (r:1 w:1)
	/// Proof: `SubspaceModule::ValidatorBlacklist` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_blacklist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2213`
		//  Estimated: `5678`
		// Minimum execution time: 61_294_000 picoseconds.
		Weight::from_parts(62_146_000, 5678)
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SubspaceModule::Founder` (r:1 w:0)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:1 w:0)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:1 w:0)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:1 w:0)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:1 w:0)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:1 w:0)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (r:1 w:0)
	/// Proof: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BondsMovingAverage` (r:1 w:0)
	/// Proof: `SubspaceModule::BondsMovingAverage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ModuleBurnConfig` (r:1 w:0)
	/// Proof: `SubspaceModule::ModuleBurnConfig` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinValidatorStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedValidators` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::SubnetGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::SubnetGovernanceConfig` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::SubnetMetadata` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ValidatorBlacklist` (r:1 w:1)
	/// Proof: `SubspaceModule::ValidatorBlacklist` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_blacklist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2274`
		//  Estimated: `5739`
		// Minimum execution time: 62_526_000 picoseconds.
		Weight::from_parts(63_319_000, 5739)
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:2 w:0)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinValidatorStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetEmissionModule::SubnetConsensusType` (r:1 w:0)
	/// Proof: `SubnetEmissionModule::SubnetConsensusType` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:1 w:0)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (r:1 w:0)
	/// Proof: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::WeightSetAt` (r:0 w:1)
	/// Proof: `SubspaceModule::WeightSetAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Weights` (r:0 w:1)
	/// Proof: `SubspaceModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2136`
		//  Estimated: `8076`
		// Minimum execution time: 65_763_000 picoseconds.
		Weight::from_parts(67_386_000, 8076)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::MinimumAllowedStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinimumAllowedStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:5 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:5 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:2 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:3 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1648`
		//  Estimated: `15013`
		// Minimum execution time: 74_459_000 picoseconds.
		Weight::from_parts(76_623_000, 15013)
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `SubspaceModule::StakeTo` (r:2 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinimumAllowedStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinimumAllowedStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:5 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:5 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::StakeFrom` (r:3 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1732`
		//  Estimated: `15097`
		// Minimum execution time: 80_150_000 picoseconds.
		Weight::from_parts(82_384_000, 15097)
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `SubspaceModule::MinimumAllowedStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinimumAllowedStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::N` (r:5 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:3 w:2)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:6 w:2)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_stake_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1864`
		//  Estimated: `27604`
		// Minimum execution time: 144_931_000 picoseconds.
		Weight::from_parts(146_203_000, 27604)
			.saturating_add(RocksDbWeight::get().reads(27_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `SubspaceModule::MinimumAllowedStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinimumAllowedStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:3 w:2)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:5 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::StakeFrom` (r:6 w:2)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_stake_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2002`
		//  Estimated: `27742`
		// Minimum execution time: 170_419_000 picoseconds.
		Weight::from_parts(172_793_000, 27742)
			.saturating_add(RocksDbWeight::get().reads(27_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `SubspaceModule::N` (r:5 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinimumAllowedStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinimumAllowedStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:3 w:2)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::StakeFrom` (r:6 w:2)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn transfer_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1948`
		//  Estimated: `27688`
		// Minimum execution time: 167_924_000 picoseconds.
		Weight::from_parts(170_388_000, 27688)
			.saturating_add(RocksDbWeight::get().reads(27_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `System::Account` (r:3 w:3)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn transfer_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `77`
		//  Estimated: `8727`
		// Minimum execution time: 61_715_000 picoseconds.
		Weight::from_parts(62_507_000, 8727)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `SubspaceModule::RegistrationsPerBlock` (r:1 w:1)
	/// Proof: `SubspaceModule::RegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:2 w:0)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ModuleBurnConfig` (r:1 w:0)
	/// Proof: `SubspaceModule::ModuleBurnConfig` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubspaceModule::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:3 w:1)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:2 w:1)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetEmissionModule::SubnetConsensusType` (r:6 w:0)
	/// Proof: `SubnetEmissionModule::SubnetConsensusType` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:6 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MinNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Name` (r:2 w:1)
	/// Proof: `SubspaceModule::Name` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FloorDelegationFee` (r:1 w:0)
	/// Proof: `SubspaceModule::FloorDelegationFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::DelegationFee` (r:1 w:1)
	/// Proof: `SubspaceModule::DelegationFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Active` (r:1 w:1)
	/// Proof: `SubspaceModule::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Consensus` (r:1 w:1)
	/// Proof: `SubspaceModule::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Emission` (r:1 w:1)
	/// Proof: `SubspaceModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Incentive` (r:1 w:1)
	/// Proof: `SubspaceModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Dividends` (r:1 w:1)
	/// Proof: `SubspaceModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::PruningScores` (r:1 w:1)
	/// Proof: `SubspaceModule::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Rank` (r:1 w:1)
	/// Proof: `SubspaceModule::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Trust` (r:1 w:1)
	/// Proof: `SubspaceModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ValidatorPermits` (r:1 w:1)
	/// Proof: `SubspaceModule::ValidatorPermits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ValidatorTrust` (r:1 w:1)
	/// Proof: `SubspaceModule::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationBlock` (r:0 w:1)
	/// Proof: `SubspaceModule::RegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:0 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Metadata` (r:0 w:1)
	/// Proof: `SubspaceModule::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2808`
		//  Estimated: `18648`
		// Minimum execution time: 150_341_000 picoseconds.
		Weight::from_parts(152_215_000, 18648)
			.saturating_add(RocksDbWeight::get().reads(45_u64))
			.saturating_add(RocksDbWeight::get().writes(24_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:7 w:1)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:3 w:1)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Active` (r:1 w:1)
	/// Proof: `SubspaceModule::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Consensus` (r:1 w:1)
	/// Proof: `SubspaceModule::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Dividends` (r:1 w:1)
	/// Proof: `SubspaceModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Emission` (r:1 w:1)
	/// Proof: `SubspaceModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Incentive` (r:1 w:1)
	/// Proof: `SubspaceModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::PruningScores` (r:1 w:1)
	/// Proof: `SubspaceModule::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Rank` (r:1 w:1)
	/// Proof: `SubspaceModule::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Trust` (r:1 w:1)
	/// Proof: `SubspaceModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ValidatorPermits` (r:1 w:1)
	/// Proof: `SubspaceModule::ValidatorPermits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ValidatorTrust` (r:1 w:1)
	/// Proof: `SubspaceModule::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::WeightSetAt` (r:1 w:1)
	/// Proof: `SubspaceModule::WeightSetAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Weights` (r:1 w:1)
	/// Proof: `SubspaceModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationBlock` (r:1 w:1)
	/// Proof: `SubspaceModule::RegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:1 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Metadata` (r:1 w:1)
	/// Proof: `SubspaceModule::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Name` (r:1 w:1)
	/// Proof: `SubspaceModule::Name` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:2 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubnetEmissionModule::SubnetConsensusType` (r:1 w:1)
	/// Proof: `SubnetEmissionModule::SubnetConsensusType` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetGaps` (r:1 w:1)
	/// Proof: `SubspaceModule::SubnetGaps` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetEmissionModule::SubnetEmission` (r:0 w:1)
	/// Proof: `SubnetEmissionModule::SubnetEmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::SubnetGovernanceConfig` (r:0 w:1)
	/// Proof: `GovernanceModule::SubnetGovernanceConfig` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::DelegationFee` (r:0 w:1)
	/// Proof: `SubspaceModule::DelegationFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ModuleBurnConfig` (r:0 w:1)
	/// Proof: `SubspaceModule::ModuleBurnConfig` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetRegistrationBlock` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetRegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:0 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetMetadata` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:0 w:1)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:0 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinValidatorStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BondsMovingAverage` (r:0 w:1)
	/// Proof: `SubspaceModule::BondsMovingAverage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (r:0 w:1)
	/// Proof: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3266`
		//  Estimated: `21581`
		// Minimum execution time: 251_861_000 picoseconds.
		Weight::from_parts(254_466_000, 21581)
			.saturating_add(RocksDbWeight::get().reads(35_u64))
			.saturating_add(RocksDbWeight::get().writes(46_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Name` (r:2 w:1)
	/// Proof: `SubspaceModule::Name` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:1 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Metadata` (r:1 w:1)
	/// Proof: `SubspaceModule::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::DelegationFee` (r:1 w:0)
	/// Proof: `SubspaceModule::DelegationFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MinNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FloorDelegationFee` (r:1 w:0)
	/// Proof: `SubspaceModule::FloorDelegationFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1728`
		//  Estimated: `7668`
		// Minimum execution time: 46_968_000 picoseconds.
		Weight::from_parts(47_780_000, 7668)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `GovernanceModule::SubnetGovernanceConfig` (r:1 w:1)
	/// Proof: `GovernanceModule::SubnetGovernanceConfig` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MinNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::Curator` (r:1 w:0)
	/// Proof: `GovernanceModule::Curator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::FloorFounderShare` (r:1 w:0)
	/// Proof: `SubspaceModule::FloorFounderShare` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FloorDelegationFee` (r:1 w:0)
	/// Proof: `SubspaceModule::FloorDelegationFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetImmunityPeriod` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetImmunityPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::GeneralSubnetApplicationCost` (r:1 w:0)
	/// Proof: `GovernanceModule::GeneralSubnetApplicationCost` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Kappa` (r:1 w:0)
	/// Proof: `SubspaceModule::Kappa` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Rho` (r:1 w:0)
	/// Proof: `SubspaceModule::Rho` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(30), added: 525, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::N` (r:1 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:6 w:1)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:1 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ModuleBurnConfig` (r:0 w:1)
	/// Proof: `SubspaceModule::ModuleBurnConfig` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedValidators` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:0 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetMetadata` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:0 w:1)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinValidatorStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BondsMovingAverage` (r:0 w:1)
	/// Proof: `SubspaceModule::BondsMovingAverage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (r:0 w:1)
	/// Proof: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_subnet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1800`
		//  Estimated: `17640`
		// Minimum execution time: 77_946_000 picoseconds.
		Weight::from_parts(79_148_000, 17640)
			.saturating_add(RocksDbWeight::get().reads(24_u64))
			.saturating_add(RocksDbWeight::get().writes(18_u64))
	}
	/// Storage: `SubnetEmissionModule::SubnetConsensusType` (r:6 w:0)
	/// Proof: `SubnetEmissionModule::SubnetConsensusType` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:2 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RootnetControlDelegation` (r:1 w:1)
	/// Proof: `SubspaceModule::RootnetControlDelegation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RootNetWeightCalls` (r:1 w:1)
	/// Proof: `SubspaceModule::RootNetWeightCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delegate_rootnet_control() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1134`
		//  Estimated: `16974`
		// Minimum execution time: 29_114_000 picoseconds.
		Weight::from_parts(29_816_000, 16974)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SubspaceModule::SubnetNames` (r:5 w:1)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FloorFounderShare` (r:1 w:0)
	/// Proof: `SubspaceModule::FloorFounderShare` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MinNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::Curator` (r:1 w:0)
	/// Proof: `GovernanceModule::Curator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::FloorDelegationFee` (r:1 w:0)
	/// Proof: `SubspaceModule::FloorDelegationFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinWeightStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetImmunityPeriod` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetImmunityPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::GeneralSubnetApplicationCost` (r:1 w:0)
	/// Proof: `GovernanceModule::GeneralSubnetApplicationCost` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Kappa` (r:1 w:0)
	/// Proof: `SubspaceModule::Kappa` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Rho` (r:1 w:0)
	/// Proof: `SubspaceModule::Rho` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(30), added: 525, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::SubnetBurn` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetBurn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::N` (r:6 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetGaps` (r:1 w:1)
	/// Proof: `SubspaceModule::SubnetGaps` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubspaceModule::SubnetRegistrationsThisInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetEmissionModule::SubnetEmission` (r:0 w:1)
	/// Proof: `SubnetEmissionModule::SubnetEmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetEmissionModule::SubnetConsensusType` (r:0 w:1)
	/// Proof: `SubnetEmissionModule::SubnetConsensusType` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::SubnetGovernanceConfig` (r:0 w:1)
	/// Proof: `GovernanceModule::SubnetGovernanceConfig` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Burn` (r:0 w:1)
	/// Proof: `SubspaceModule::Burn` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ModuleBurnConfig` (r:0 w:1)
	/// Proof: `SubspaceModule::ModuleBurnConfig` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetRegistrationBlock` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetRegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:0 w:1)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedValidators` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:0 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetMetadata` (r:0 w:1)
	/// Proof: `SubspaceModule::SubnetMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:0 w:1)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:0 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinValidatorStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BondsMovingAverage` (r:0 w:1)
	/// Proof: `SubspaceModule::BondsMovingAverage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (r:0 w:1)
	/// Proof: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_subnet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1351`
		//  Estimated: `17191`
		// Minimum execution time: 109_685_000 picoseconds.
		Weight::from_parts(111_358_000, 17191)
			.saturating_add(RocksDbWeight::get().reads(30_u64))
			.saturating_add(RocksDbWeight::get().writes(26_u64))
	}
	/// Storage: `SubspaceModule::Founder` (r:1 w:0)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:1 w:0)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:1 w:0)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:1 w:0)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:1 w:0)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:1 w:0)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (r:1 w:0)
	/// Proof: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BondsMovingAverage` (r:1 w:0)
	/// Proof: `SubspaceModule::BondsMovingAverage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ModuleBurnConfig` (r:1 w:0)
	/// Proof: `SubspaceModule::ModuleBurnConfig` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinValidatorStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedValidators` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::SubnetGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::SubnetGovernanceConfig` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::SubnetMetadata` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ValidatorBlacklist` (r:1 w:1)
	/// Proof: `SubspaceModule::ValidatorBlacklist` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_blacklist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2213`
		//  Estimated: `5678`
		// Minimum execution time: 61_294_000 picoseconds.
		Weight::from_parts(62_146_000, 5678)
			.saturating_add(RocksDbWeight::get().reads(19_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `SubspaceModule::Founder` (r:1 w:0)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::FounderShare` (r:1 w:0)
	/// Proof: `SubspaceModule::FounderShare` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:1 w:0)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:1 w:0)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxWeightAge` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxWeightAge` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNames` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetNames` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TrustRatio` (r:1 w:0)
	/// Proof: `SubspaceModule::TrustRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::IncentiveRatio` (r:1 w:0)
	/// Proof: `SubspaceModule::IncentiveRatio` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (r:1 w:0)
	/// Proof: `SubspaceModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::BondsMovingAverage` (r:1 w:0)
	/// Proof: `SubspaceModule::BondsMovingAverage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ModuleBurnConfig` (r:1 w:0)
	/// Proof: `SubspaceModule::ModuleBurnConfig` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinValidatorStake` (r:1 w:0)
	/// Proof: `SubspaceModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedValidators` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::SubnetGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::SubnetGovernanceConfig` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::SubnetMetadata` (r:1 w:0)
	/// Proof: `SubspaceModule::SubnetMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ValidatorBlacklist` (r:1 w:1)
	/// Proof: `SubspaceModule::ValidatorBlacklist` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_blacklist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2274`
		//  Estimated: `5739`
		// Minimum execution time: 62_526_000 picoseconds.
		Weight::from_parts(63_319_000, 5739)
			.saturating_add(RocksDbWeight::get().reads(19_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}